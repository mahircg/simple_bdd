#include "Manager.hpp"

using namespace std;


Manager::Manager()
{
      
	nextID=2;
	low=new BDD_ID(" ",1);
	high=new BDD_ID(" ",2);
}

Manager::~Manager()
{
        
}

BDD_ID Manager::createVar(const string& varName)
{
  nextID+=1;

  BDD_ID tmp(varName,nextID,True(),False());
  pair<BDD_ID,unsigned> elem(tmp,nextID);
  uniqueTable.insert(elem);
  return tmp;
	
}

BDD_ID* Manager::True() const
{
  return high;
}

BDD_ID* Manager::False() const
{
  return low;
}

bool Manager::isVariable(const BDD_ID& node)
{
  return ((unsigned)node!=1 && (unsigned)node!=2);
}

bool Manager::isConstant(const BDD_ID& node)
{
	return !isVariable(node);
}

size_t Manager::topVar(const BDD_ID& node) // Root Node Id
{
  return (unsigned)(node);
}

BDD_ID Manager::coFactorTrue(const BDD_ID f,const BDD_ID g)
{

	
}

BDD_ID Manager::coFactorFalse(const BDD_ID f,const BDD_ID g)
{

}

BDD_ID Manager::coFactorTrue(const BDD_ID f) // T CoFactor of f
{
         if(isConstant(f))
	     return f;

	 
	 return (*f.getHigh());
}

BDD_ID Manager::coFactorFalse(const BDD_ID f) // E CoFactor of f
{
         if(isConstant(f))
	     return f;

	 
	 return (*f.getLow());
}

BDD_ID Manager::ite(const BDD_ID f,const BDD_ID g,const BDD_ID h)
{
  //Terminal cases of recursion
  if(f==*True())     
     return g;
  else if (f==*False())
       return h;
  else if (h ==*False() && g == *True())
       return f;
  else
    {
      BDD_ID x=topVar(f);
      BDD_ID t=ite(coFactorTrue(f,x),coFactorTrue(g,x),coFactorTrue(h,x));
      BDD_ID e=ite(coFactorFalse(f,x),coFactorFalse(g,x),coFactorFalse(h,x));
      if(t==e)
	return t;
      nextID += 1;
      BDD_ID tmp((string)x,nextID,t,e);
      pair<BDD_ID,unsigned> elem(tmp,nextID);
      uniqueTable.insert(elem);
      return tmp;
    }


}

BDD_ID Manager::and2(const BDD_ID f,const BDD_ID g)
{
  return ite(f,g,*False());
}

BDD_ID Manager::or2(const BDD_ID f,const BDD_ID g)
{
  return ite(f,*True(),g);
}

BDD_ID Manager::xor2(const BDD_ID f,const BDD_ID g)
{
  return ite(f,neg(g),g);
}

BDD_ID Manager::nand2(const BDD_ID f,const BDD_ID g)
{
  return ite(f,neg(g),*True());
}

BDD_ID Manager::nor2(const BDD_ID f,const BDD_ID g)
{
  return ite(f,*False(),neg(g));
}

BDD_ID Manager::neg(const BDD_ID f)
{
  return ite(f,*False(),*True());
}

string Manager::getTopVarName(const BDD_ID& f)
{
  //string() operator overloaded for BDD_ID,so statement below is valid
  return f;
}

void Manager::findNodes(const BDD_ID& f,set<BDD_ID>& list)
{
}

void Manager::findVars(const BDD_ID& f,set<BDD_ID>& list)
{
}

